package com.DS1.OOP;

public class ObjectDemo10 {

    int num;
    float num2;

    public ObjectDemo10(int num, float num2) {
        this.num = num;
        this.num2 = num2;
    }

    // HASHCODE GIVES US A RANDOM NUMBER SO THAT WE CAN IDENTIFY WHETHER THE OBJECT IS SAME OR NOT.
    // BELOW IF OBJ2 = OBJ THEN HASHCODE WOULD BE SAME FOR BOTH.
    // HASHCODE IS NOT THE ADDRESS IT IS RANDOM VALUE GENERATED BY SOME ALGORITHM.
    @Override
    public int hashCode() {
        return super.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        return super.equals(obj);
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    @Override
    public String toString() {
        return super.toString();
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
    }


    public static void main(String[] args) {
        ObjectDemo10 obj = new ObjectDemo10(34, 16.5f);
        ObjectDemo10 obj2 = new ObjectDemo10(34, 45.5f);


        System.out.println(obj.hashCode());
        System.out.println(obj2.hashCode());

        if (obj == obj2){
            System.out.println("Obj and Obj2 are equal");
        }
        // == CHECKS IF POINTING TO SAME OBJECT OR NOT.



        if (obj.equals(obj2)){
            System.out.println("Obj and Obj2 are equal");
        }
        // .EQUALS CHECKS ONLY VALUES.
        // BY TYPECASTING WE CAN MAKE THE FUNCTION CHECK ONLY INT OR FLOAT VALUES AS PER OUT CONVENIENCE.


    }
}
