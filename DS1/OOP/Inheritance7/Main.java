package com.DS1.OOP.Inheritance7;

public class Main {
    public static void main(String[] args) {
        Box box1 = new Box(2.4, 4.5, 6.7);
        Box box2 = new Box(2.6);
        Box box3 = new Box();
        Box box4 = new Box(box2);

        BoxWeight box5 = new BoxWeight();
//        System.out.println(box5.h + " " + box5.weight);

        BoxWeight box6 = new BoxWeight(2,4,6,4);

        Box box7 = new BoxWeight(3,4,6,7);
        // OBJECT TYPE DOES NOT DEFINE WHAT IT COULD ACCESS.
        // HERE OBJECT IS CREATED IN BOX WEIGHT BUT IT STILL CAN'T ACCESS WEIGHT PARAMETER.
        // BECAUSE REFERENCE TYPE IS BOX.
        // WHEN A REFERENCE TO A SUB CLASS OBJECT IS ASSIGNED TO SUPER CLASS VARIABLE
        // THEN ACCESS WILL BE ONLY OF THOSE PARTS THAT ARE PRESENT/DEFINED IN SUPER CLASS.

        System.out.println(box7.l);

        // BoxWeight box8 = mew Box(2,3,4);
        // THERE ARE MANY VARIABLES IN BOTH PARENT AND CHILD CLASSES.
        // YOU ARE GIVEN ACCESS TO VARIABLES THAT ARE IN THE REFERENCE TYPE I.E BOXWEIGHT.
        // HENCE, YOU SHOULD HAVE ACCESS TO WEIGHT VARIABLE.
        // THIS ALSO MEANS THAT THE ONES WE ARE TRYING TO ACCESS SHOULD BE INITIALISED.
        // BUT HERE, WHEN THE OBJ ITSELF IS OF TYPE PARENT CLASS, HOW WILL YOU CALL THE CONSTRUCTOR.
        // THAT IS WHY ERROR.
        // LOWER FUNCTIONS KNOW WHAT ABOVE FUNCTIONS CONTAIN BUT UPPER DOES NOT KNOW WHAT LOWER HAS.


        BoxPrice box8 = new BoxPrice(2,5,200);
        // HERE IT WILL CALL THE 3 PARAMETER CONSTRUCTOR IN BOXPRICE CLASS.
        // THEN IN BOXPRICE SIDE AND WEIGHT ARE PRESENT IN ABOVE CLASSES SO SUPER.
        // AND COST IS PRESENT THERE ONLY SO DIRECTLY ASSIGN THAT.
        // SUPER IN BOXPRICE CLASS CONSTRUCTOR WOULD CHECK 2 PARAMETER CONSTRUCTOR IN BOXWEIGHT CLASS.
        // AS SIDE IS PRESENT IN BOX CLASS SO SUPER SIDE AND THERE SHOULD BE ONE PARAMETER CONSTRUCTOR IN BOX CLASS.
        // WEIGHT IS PRESENT IN SAME CLASS SO DIRECTLY ASSIGN THAT.

    }
}
